@FunctionalInterface
interface IntFunction {
    int apply(int value);
}

public class AnonymousFunctionExample {

    public static void main(String[] args) {
        // Anonymous inner class
        IntFunction square = new IntFunction() {
            @Override
            public int apply(int value) {
                return value * value;
            }
        };

        System.out.println("Square of 5: " + square.apply(5));
    }
}


// lambda expression

@FunctionalInterface
interface IntFunction {
    int apply(int value);
}

public class LambdaFunctionExample {

    public static void main(String[] args) {
        // Lambda expression
        IntFunction square = (int value) -> value * value;

        System.out.println("Square of 5: " + square.apply(5));
    }
}

//Lambda with No Parameters:

@FunctionalInterface
interface Greeting {
    void sayHello();
}

public class LambdaExample {

    public static void main(String[] args) {
        // Lambda expression with no parameters
        Greeting greet = () -> System.out.println("Hello, World!");
        greet.sayHello();
    }
}

// Lambda with Multiple Parameters:

@FunctionalInterface
interface MathOperation {
    int operate(int a, int b);
}

public class LambdaExample {
    public static void main(String[] args) {
        // Multiple parameters
        MathOperation addition = (a, b) -> a + b;
        MathOperation subtraction = (a, b) -> a - b;

        System.out.println("Addition: " + addition.operate(10, 5));
        System.out.println("Subtraction: " + subtraction.operate(10, 5));
    }
}

// Effectively Final Variables

public class LambdaExample {
    public static void main(String[] args) {
        int multiplier = 2; // This variable must be effectively final

        // Lambda using an external variable
        MathOperation multiply = (a, b) -> a * b * multiplier;
        System.out.println("Result: " + multiply.operate(3, 4));
    }
}

@FunctionalInterface
interface MathOperation {
    int operate(int a, int b);
}

// Method References

import java.util.function.*;

public class MethodReferenceExample {

    public static void main(String[] args) {
        // Static method reference
        Function<String, Integer> parseInt = Integer::parseInt;
        System.out.println(parseInt.apply("123"));

        // Instance method reference of a particular object
        String message = "Hello, World!";
        Supplier<String> supplier = message::toUpperCase;
        System.out.println(supplier.get());

        // Instance method reference of an arbitrary object
        Function<String, String> toUpperCase = String::toUpperCase;
        System.out.println(toUpperCase.apply("hello"));

        // Constructor reference
        Supplier<StringBuilder> stringBuilderSupplier = StringBuilder::new;
        StringBuilder sb = stringBuilderSupplier.get();
        sb.append("Hello from StringBuilder!");
        System.out.println(sb.toString());
    }
}









